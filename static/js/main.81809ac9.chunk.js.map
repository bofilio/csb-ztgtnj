{"version":3,"sources":["util.js","consts.js","App.js","index.js"],"names":["selectRondomInArray","arr","length","rondom_index","Math","floor","random","cloneBoard","Board","map","row","slice","colors","App","useState","initRondomly","setBoard","ArrowKeysReact","config","left","console","log","handlSwip","right","up","down","className","events","tabIndex","GameOver","onClick","GameWon","index","cell","cell_index","style","backgroundColor","prevBoard","action","swapedUp","copy","i","j","k","swipUp","AreEqual","SpawnRondomPostion","swipedDown","swipDown","swipedRight","swipRight","swipedLeft","swipLeft","emptyPosition","push","spawnPos","n","current","Board1","Board2","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.81809ac9.chunk.js","sourcesContent":["export function selectRondomInArray(arr = []) {\n  if (arr.length === 0) return null;\n  const rondom_index = Math.floor(Math.random() * arr.length);\n  return arr[rondom_index];\n}\n\nexport function cloneBoard(Board) {\n  return Board.map((row) => row.slice());\n}\n","export const colors = {\n  2: \"#eee4da\",\n  4: \"#ede0c8\",\n  8: \"#f2b179\",\n  16: \"#f59563\",\n  32: \"#f67c5f\",\n  64: \"#f65e3b\",\n  128: \"#edcf72\",\n  256: \"#FF6B6B\",\n  512: \"#95D1CC\",\n  1024: \"#5584AC\",\n  2048: \"#6BCB77\"\n};\n","import React, { useState } from \"react\";\nimport \"./styles.css\";\nimport ArrowKeysReact from \"arrow-keys-react\";\nimport { cloneBoard, selectRondomInArray } from \"./util\";\nimport { colors } from \"./consts\";\n\nexport default function App() {\n  const [Board, setBoard] = useState(initRondomly(3));\n\n  ArrowKeysReact.config({\n    left: () => {\n      console.log(\"left key detected.\");\n      setBoard(handlSwip(Board, \"SWIP_LEFT\"));\n    },\n    right: () => {\n      console.log(\"right key detected.\");\n      setBoard(handlSwip(Board, \"SWIP_RIGHT\"));\n    },\n    up: () => {\n      console.log(\"up key detected.\");\n      setBoard(handlSwip(Board, \"SWIP_UP\"));\n    },\n    down: () => {\n      console.log(\"down key detected.\");\n      setBoard(handlSwip(Board, \"SWIP_DOWN\"));\n    }\n  });\n\n  return (\n    <div className=\"App\" {...ArrowKeysReact.events} tabIndex=\"1\">\n      <div className=\"Board\">\n        {GameOver(Board) && (\n          <div className=\"GameOver\">\n            <h2>Game Over</h2>\n            <button onClick={() => setBoard(handlSwip(Board, \"RESET\"))}>\n              Try Again\n            </button>\n          </div>\n        )}\n        {GameWon(Board) && (\n          <div className=\"GameWon\">\n            <h2>You Won</h2>\n            <button onClick={() => setBoard(handlSwip(Board, \"RESET\"))}>\n              Play Again\n            </button>\n          </div>\n        )}\n        {Board.map((row, index) => (\n          <div key={index} className=\"Row\">\n            {row.map((cell, cell_index) => (\n              <div\n                key={cell_index}\n                className=\"Cell\"\n                style={{ backgroundColor: colors[cell] }}\n              >\n                {cell > 0 ? cell : \"\"}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nfunction handlSwip(prevBoard, action) {\n  switch (action) {\n    case \"SWIP_UP\":\n      console.log(\"swiping up\");\n      const swapedUp = swipUp(prevBoard);\n      if (!AreEqual(swapedUp, prevBoard)) return SpawnRondomPostion(swapedUp);\n      return swapedUp;\n\n    case \"SWIP_DOWN\":\n      console.log(\"swiping down\");\n      const swipedDown = swipDown(prevBoard);\n      if (!AreEqual(swipedDown, prevBoard))\n        return SpawnRondomPostion(swipedDown);\n      return swipedDown;\n\n    case \"SWIP_RIGHT\":\n      console.log(\"swiping right\");\n      const swipedRight = swipRight(prevBoard);\n      if (!AreEqual(swipedRight, prevBoard))\n        return SpawnRondomPostion(swipedRight);\n      return swipedRight;\n\n    case \"SWIP_LEFT\":\n      console.log(\"swiping left\");\n      const swipedLeft = swipLeft(prevBoard);\n      if (!AreEqual(swipedLeft, prevBoard))\n        return SpawnRondomPostion(swipedLeft);\n      return swipedLeft;\n\n    case \"RESET\":\n      return initRondomly(2);\n\n    default:\n      return prevBoard;\n  }\n}\n\nfunction swipUp(Board) {\n  const copy = cloneBoard(Board);\n  if (GameOver(copy) || GameWon(copy)) return copy;\n  for (let i = 0; i < copy.length; i++) {\n    if (i === 0) continue;\n    for (let j = 0; j < copy[i].length; j++) {\n      if (copy[i][j] === 0) continue;\n      let k = i;\n      while (k > 0 && copy[k - 1][j] === 0) {\n        copy[k - 1][j] = copy[k][j];\n        copy[k][j] = 0;\n        k--;\n      }\n      if (k === 0) continue;\n      if (copy[k][j] === copy[k - 1][j]) {\n        copy[k - 1][j] *= 2;\n        copy[k][j] = 0;\n      }\n    }\n  }\n  return copy;\n}\nfunction swipDown(Board) {\n  const copy = cloneBoard(Board);\n  if (GameOver(copy) || GameWon(copy)) return copy;\n  for (let i = 3; i > -1; i--) {\n    if (i === 3) continue;\n    for (let j = 0; j < copy[i].length; j++) {\n      if (copy[i][j] === 0) continue;\n      let k = i;\n      while (k < 3 && copy[k + 1][j] === 0) {\n        copy[k + 1][j] = copy[k][j];\n        copy[k][j] = 0;\n        k++;\n      }\n      if (k === 3) continue;\n      if (copy[k][j] === copy[k + 1][j]) {\n        copy[k + 1][j] *= 2;\n        copy[k][j] = 0;\n      }\n    }\n  }\n  return copy;\n}\nfunction swipRight(Board) {\n  const copy = cloneBoard(Board);\n  if (GameOver(copy) || GameWon(copy)) return copy;\n  for (let i = 0; i < copy.length; i++) {\n    for (let j = 3; j > -1; j--) {\n      if (j === 3) continue;\n      if (copy[i][j] === 0) continue;\n      let k = j;\n      while (k < 3 && copy[i][k + 1] === 0) {\n        copy[i][k + 1] = copy[i][k];\n        copy[i][k] = 0;\n        k++;\n      }\n      if (k === 3) continue;\n      if (copy[i][k] === copy[i][k + 1]) {\n        copy[i][k + 1] *= 2;\n        copy[i][k] = 0;\n      }\n    }\n  }\n  return copy;\n}\nfunction swipLeft(Board) {\n  const copy = cloneBoard(Board);\n  if (GameOver(copy) || GameWon(copy)) return copy;\n  for (let i = 0; i < copy.length; i++) {\n    for (let j = 0; j < copy[i].length; j++) {\n      if (j === 0) continue;\n      if (copy[i][j] === 0) continue;\n      let k = j;\n      while (k > 0 && copy[i][k - 1] === 0) {\n        copy[i][k - 1] = copy[i][k];\n        copy[i][k] = 0;\n        k--;\n      }\n      if (k === 0) continue;\n      if (copy[i][k] === copy[i][k - 1]) {\n        copy[i][k - 1] *= 2;\n        copy[i][k] = 0;\n      }\n    }\n  }\n  return copy;\n}\n\nfunction SpawnRondomPostion(Board) {\n  const copy = cloneBoard(Board);\n  const emptyPosition = [];\n  for (let i = 0; i < copy.length; i++) {\n    for (let j = 0; j < copy[i].length; j++) {\n      if (copy[i][j] === 0) emptyPosition.push([i, j]);\n    }\n  }\n  if (emptyPosition.length) {\n    const spawnPos = selectRondomInArray(emptyPosition);\n    copy[spawnPos[0]][spawnPos[1]] = selectRondomInArray([2, 4]);\n  }\n  return copy;\n}\n\nfunction initRondomly(n) {\n  const emptyBoard = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0]\n  ];\n  let copy = emptyBoard;\n  for (let i = 0; i < n; i++) {\n    copy = SpawnRondomPostion(copy);\n  }\n  return copy;\n}\nfunction GameOver(Board) {\n  console.log(Board);\n\n  for (let i = 0; i < Board.length; i++) {\n    for (let j = 0; j < Board[i].length; j++) {\n      const current = Board[i][j];\n      if (current === 0) return false;\n      const up = i > 0 ? Board[i - 1][j] : -1;\n      const left = j > 0 ? Board[i][j - 1] : -1;\n      if (current === up || current === left) return false;\n    }\n  }\n  return true;\n}\nfunction GameWon(Board) {\n  for (let row of Board) {\n    for (let cell of row) {\n      if (cell === 2048) return true;\n    }\n  }\n  return false;\n}\nfunction AreEqual(Board1, Board2) {\n  for (let i = 0; i < Board1.length; i++) {\n    for (let j = 0; j < Board1[i].length; j++) {\n      if (Board1[i][j] !== Board2[i][j]) return false;\n    }\n  }\n  return true;\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}